#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
# Using build pattern: meson
# autospec version: v12
# autospec commit: fbcebd0
#
# Source0 file verified with key 0x0FDE7BE0E88F5E48 (contact@emersion.fr)
#
Name     : wayland
Version  : 1.23.0
Release  : 51
URL      : https://gitlab.freedesktop.org/wayland/wayland/-/releases/1.23.0/downloads/wayland-1.23.0.tar.xz
Source0  : https://gitlab.freedesktop.org/wayland/wayland/-/releases/1.23.0/downloads/wayland-1.23.0.tar.xz
Source1  : https://gitlab.freedesktop.org/wayland/wayland/-/releases/1.23.0/downloads/wayland-1.23.0.tar.xz.sig
Source2  : 0FDE7BE0E88F5E48.pkey
Summary  : No detailed summary available
Group    : Development/Tools
License  : MIT
Requires: wayland-bin = %{version}-%{release}
Requires: wayland-data = %{version}-%{release}
Requires: wayland-lib = %{version}-%{release}
Requires: wayland-license = %{version}-%{release}
BuildRequires : buildreq-meson
BuildRequires : docbook-xml
BuildRequires : doxygen
BuildRequires : expat-dev32
BuildRequires : gcc-dev32
BuildRequires : gcc-libgcc32
BuildRequires : gcc-libstdc++32
BuildRequires : glibc-dev32
BuildRequires : glibc-libc32
BuildRequires : gnupg
BuildRequires : graphviz
BuildRequires : libffi-dev32
BuildRequires : libxml2-dev32
BuildRequires : libxslt
BuildRequires : xmlto
# Suppress stripping binaries
%define __strip /bin/true
%define debug_package %{nil}

%description
# Wayland
Wayland is a project to define a protocol for a compositor to talk to
its clients as well as a library implementation of the protocol.  The
compositor can be a standalone display server running on Linux kernel
modesetting and evdev input devices, an X application, or a wayland
client itself.  The clients can be traditional applications, X servers
(rootless or fullscreen) or other display servers.

%package bin
Summary: bin components for the wayland package.
Group: Binaries
Requires: wayland-data = %{version}-%{release}
Requires: wayland-license = %{version}-%{release}

%description bin
bin components for the wayland package.


%package data
Summary: data components for the wayland package.
Group: Data

%description data
data components for the wayland package.


%package dev
Summary: dev components for the wayland package.
Group: Development
Requires: wayland-lib = %{version}-%{release}
Requires: wayland-bin = %{version}-%{release}
Requires: wayland-data = %{version}-%{release}
Provides: wayland-devel = %{version}-%{release}
Requires: wayland = %{version}-%{release}

%description dev
dev components for the wayland package.


%package dev32
Summary: dev32 components for the wayland package.
Group: Default
Requires: wayland-lib32 = %{version}-%{release}
Requires: wayland-bin = %{version}-%{release}
Requires: wayland-data = %{version}-%{release}
Requires: wayland-dev = %{version}-%{release}

%description dev32
dev32 components for the wayland package.


%package lib
Summary: lib components for the wayland package.
Group: Libraries
Requires: wayland-data = %{version}-%{release}
Requires: wayland-license = %{version}-%{release}

%description lib
lib components for the wayland package.


%package lib32
Summary: lib32 components for the wayland package.
Group: Default
Requires: wayland-data = %{version}-%{release}
Requires: wayland-license = %{version}-%{release}

%description lib32
lib32 components for the wayland package.


%package license
Summary: license components for the wayland package.
Group: Default

%description license
license components for the wayland package.


%prep
mkdir .gnupg
chmod 700 .gnupg
gpg --homedir .gnupg --import %{SOURCE2}
gpg --homedir .gnupg --status-fd 1 --verify %{SOURCE1} %{SOURCE0} > gpg.status
grep -E '^\[GNUPG:\] (GOODSIG|EXPKEYSIG) 0FDE7BE0E88F5E48' gpg.status
%setup -q -n wayland-1.23.0
cd %{_builddir}/wayland-1.23.0
pushd ..
cp -a wayland-1.23.0 build32
popd
pushd ..
cp -a wayland-1.23.0 buildavx2
popd

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1717553805
export GCC_IGNORE_WERROR=1
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
CLEAR_INTERMEDIATE_CFLAGS="$CLEAR_INTERMEDIATE_CFLAGS -O3 -falign-functions=32 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -fno-semantic-interposition -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
CLEAR_INTERMEDIATE_FCFLAGS="$CLEAR_INTERMEDIATE_FFLAGS -O3 -falign-functions=32 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -fno-semantic-interposition -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
CLEAR_INTERMEDIATE_FFLAGS="$CLEAR_INTERMEDIATE_FFLAGS -O3 -falign-functions=32 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -fno-semantic-interposition -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
CLEAR_INTERMEDIATE_CXXFLAGS="$CLEAR_INTERMEDIATE_CXXFLAGS -O3 -falign-functions=32 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -fno-semantic-interposition -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
CFLAGS="$CLEAR_INTERMEDIATE_CFLAGS"
CXXFLAGS="$CLEAR_INTERMEDIATE_CXXFLAGS"
FFLAGS="$CLEAR_INTERMEDIATE_FFLAGS"
FCFLAGS="$CLEAR_INTERMEDIATE_FCFLAGS"
ASFLAGS="$CLEAR_INTERMEDIATE_ASFLAGS"
LDFLAGS="$CLEAR_INTERMEDIATE_LDFLAGS"
export GOAMD64=v2
meson --libdir=lib64 --prefix=/usr --buildtype=plain -Ddocumentation=false  builddir
ninja -v -C builddir
GOAMD64=v3
CFLAGS="$CFLAGS -march=x86-64-v3 -Wl,-z,x86-64-v3 " CXXFLAGS="$CXXFLAGS -march=x86-64-v3 -Wl,-z,x86-64-v3 " LDFLAGS="$LDFLAGS -march=x86-64-v3 " meson --libdir=lib64 --prefix=/usr --buildtype=plain -Ddocumentation=false  builddiravx2
ninja -v -C builddiravx2
pushd ../build32/
export PKG_CONFIG_PATH="/usr/lib32/pkgconfig:/usr/share/pkgconfig"
ASFLAGS="${CLEAR_INTERMEDIATE_ASFLAGS}${CLEAR_INTERMEDIATE_ASFLAGS:+ }--32"
CFLAGS="${CLEAR_INTERMEDIATE_CFLAGS}${CLEAR_INTERMEDIATE_CFLAGS:+ }-m32 -mstackrealign"
CXXFLAGS="${CLEAR_INTERMEDIATE_CXXFLAGS}${CLEAR_INTERMEDIATE_CXXFLAGS:+ }-m32 -mstackrealign"
LDFLAGS="${CLEAR_INTERMEDIATE_LDFLAGS}${CLEAR_INTERMEDIATE_LDFLAGS:+ }-m32 -mstackrealign"
meson --libdir=lib32 --prefix=/usr --buildtype=plain -Ddocumentation=false  builddir
ninja -v -C builddir
popd

%check
export LANG=C.UTF-8
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
meson test -C builddir --print-errorlogs
cd ../build32;
meson test -C builddir --print-errorlogs || :

%install
export GCC_IGNORE_WERROR=1
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
CLEAR_INTERMEDIATE_CFLAGS="$CLEAR_INTERMEDIATE_CFLAGS -O3 -falign-functions=32 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -fno-semantic-interposition -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
CLEAR_INTERMEDIATE_FCFLAGS="$CLEAR_INTERMEDIATE_FFLAGS -O3 -falign-functions=32 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -fno-semantic-interposition -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
CLEAR_INTERMEDIATE_FFLAGS="$CLEAR_INTERMEDIATE_FFLAGS -O3 -falign-functions=32 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -fno-semantic-interposition -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
CLEAR_INTERMEDIATE_CXXFLAGS="$CLEAR_INTERMEDIATE_CXXFLAGS -O3 -falign-functions=32 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -fno-semantic-interposition -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
CFLAGS="$CLEAR_INTERMEDIATE_CFLAGS"
CXXFLAGS="$CLEAR_INTERMEDIATE_CXXFLAGS"
FFLAGS="$CLEAR_INTERMEDIATE_FFLAGS"
FCFLAGS="$CLEAR_INTERMEDIATE_FCFLAGS"
ASFLAGS="$CLEAR_INTERMEDIATE_ASFLAGS"
LDFLAGS="$CLEAR_INTERMEDIATE_LDFLAGS"
export GOAMD64=v2
mkdir -p %{buildroot}/usr/share/package-licenses/wayland
cp %{_builddir}/wayland-%{version}/COPYING %{buildroot}/usr/share/package-licenses/wayland/997b2f1a3639f31f0757b06a15035315baaffadc || :
pushd ../build32/
DESTDIR=%{buildroot} ninja -C builddir install
if [ -d  %{buildroot}/usr/lib32/pkgconfig ]
then
pushd %{buildroot}/usr/lib32/pkgconfig
for i in *.pc ; do ln -s $i 32$i ; done
popd
fi
if [ -d %{buildroot}/usr/share/pkgconfig ]
then
pushd %{buildroot}/usr/share/pkgconfig
for i in *.pc ; do ln -s $i 32$i ; done
popd
fi
popd
GOAMD64=v3
DESTDIR=%{buildroot}-v3 ninja -C builddiravx2 install
GOAMD64=v2
DESTDIR=%{buildroot} ninja -C builddir install
/usr/bin/elf-move.py avx2 %{buildroot}-v3 %{buildroot} %{buildroot}/usr/share/clear/filemap/filemap-%{name}

%files
%defattr(-,root,root,-)

%files bin
%defattr(-,root,root,-)
/V3/usr/bin/wayland-scanner
/usr/bin/wayland-scanner

%files data
%defattr(-,root,root,-)
/usr/share/wayland/wayland-scanner.mk
/usr/share/wayland/wayland.dtd
/usr/share/wayland/wayland.xml

%files dev
%defattr(-,root,root,-)
/usr/include/wayland-client-core.h
/usr/include/wayland-client-protocol.h
/usr/include/wayland-client.h
/usr/include/wayland-cursor.h
/usr/include/wayland-egl-backend.h
/usr/include/wayland-egl-core.h
/usr/include/wayland-egl.h
/usr/include/wayland-server-core.h
/usr/include/wayland-server-protocol.h
/usr/include/wayland-server.h
/usr/include/wayland-util.h
/usr/include/wayland-version.h
/usr/lib64/libwayland-client.so
/usr/lib64/libwayland-cursor.so
/usr/lib64/libwayland-egl.so
/usr/lib64/libwayland-server.so
/usr/lib64/pkgconfig/wayland-client.pc
/usr/lib64/pkgconfig/wayland-cursor.pc
/usr/lib64/pkgconfig/wayland-egl-backend.pc
/usr/lib64/pkgconfig/wayland-egl.pc
/usr/lib64/pkgconfig/wayland-scanner.pc
/usr/lib64/pkgconfig/wayland-server.pc
/usr/share/aclocal/*.m4

%files dev32
%defattr(-,root,root,-)
/usr/lib32/libwayland-client.so
/usr/lib32/libwayland-cursor.so
/usr/lib32/libwayland-egl.so
/usr/lib32/libwayland-server.so
/usr/lib32/pkgconfig/32wayland-client.pc
/usr/lib32/pkgconfig/32wayland-cursor.pc
/usr/lib32/pkgconfig/32wayland-egl-backend.pc
/usr/lib32/pkgconfig/32wayland-egl.pc
/usr/lib32/pkgconfig/32wayland-scanner.pc
/usr/lib32/pkgconfig/32wayland-server.pc
/usr/lib32/pkgconfig/wayland-client.pc
/usr/lib32/pkgconfig/wayland-cursor.pc
/usr/lib32/pkgconfig/wayland-egl-backend.pc
/usr/lib32/pkgconfig/wayland-egl.pc
/usr/lib32/pkgconfig/wayland-scanner.pc
/usr/lib32/pkgconfig/wayland-server.pc

%files lib
%defattr(-,root,root,-)
/V3/usr/lib64/libwayland-client.so.0.23.0
/V3/usr/lib64/libwayland-cursor.so.0.23.0
/V3/usr/lib64/libwayland-egl.so.1.23.0
/V3/usr/lib64/libwayland-server.so.0.23.0
/usr/lib64/libwayland-client.so.0
/usr/lib64/libwayland-client.so.0.23.0
/usr/lib64/libwayland-cursor.so.0
/usr/lib64/libwayland-cursor.so.0.23.0
/usr/lib64/libwayland-egl.so.1
/usr/lib64/libwayland-egl.so.1.23.0
/usr/lib64/libwayland-server.so.0
/usr/lib64/libwayland-server.so.0.23.0

%files lib32
%defattr(-,root,root,-)
/usr/lib32/libwayland-client.so.0
/usr/lib32/libwayland-client.so.0.23.0
/usr/lib32/libwayland-cursor.so.0
/usr/lib32/libwayland-cursor.so.0.23.0
/usr/lib32/libwayland-egl.so.1
/usr/lib32/libwayland-egl.so.1.23.0
/usr/lib32/libwayland-server.so.0
/usr/lib32/libwayland-server.so.0.23.0

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/wayland/997b2f1a3639f31f0757b06a15035315baaffadc
